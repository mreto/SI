Fork-bomba (ang. fork bomb) jest rodzajem ataku Denial of Service na systemy komputerowe.   == Implementacja ataku ==   === Charakterystyka === Podstawowa implementacja fork bomby jest nieskonczona petla ktora uruchamia ten sam proces. Atak opiera sie na zalozeniu, ze w srodowisku wieloprocesowym tylko pewna liczba procesow moze byc efektywnie wykonywana naraz. Atak polega na bardzo szybkim ,,rozmnozeniu" kopii programu (fork to nazwa funkcji systemowej sluzacej do tworzenia nowych procesow) w celu wypelnienia tablicy procesow systemu operacyjnego.W takiej sytuacji wywolanie nowego procesu (majacego na celu np. zabicie procesow bomby) jest wstrzymane do czasu zwolnienia chocby jednego wpisu, co jednak jest malo prawdopodobne, poniewaz kazdy proces bomby jest gotow w tym momencie sie rozmnozyc. Poniewaz kazdy z procesow bomby wykonuje jakis kod (nie usypia sie), planista systemowy kazdemu z nich przydziela czas procesora, co praktycznie zatrzymuje dzialanie systemu. Jedna z technik obrony przed fork-bombami jest ustalenie gornego limitu procesow, jakie moze utworzyc dany proces lub uzytkownik (dotyczy to rowniez jego dalszych potomkow).   === Porownanie ataku w systemach Windows oraz Unix === W systemach z rodziny Unix, fork bomby przewaznie uzywaja wywolania fork. Poniewaz procesy utworzone przez bombe sa kopiami programu "pierwotnego", w momencie kolejnych wykonan zaczynaja takze tworzyc kopie samych siebie; w efekcie dochodzi do wykladniczego wzrostu ilosci procesow. Poniewaz wspolczesne systemy Unix przewaznie korzystaja z opcji kopiowania przy zapisie przy tworzeniu nowych procesow wywolaniem ,,fork", bomba zazwyczaj nie zuzywa duzej ilosci pamieci. Systemy Microsoft Windows nie posiadaja funkcji, bedacej odpowiednikiem wywolania fork w systemach Unix; zatem fork bomba na takim systemie musi tworzyc nowy proces zamiast kopiowac istniejacy.   == Przyklady fork-bomb == Microsoft Windows, program wsadowy:  Krotsza wersja:  bash  Wyjasnienie: zdefiniowana jest tutaj funkcja o nazwie ":" nie przyjmujaca zadnego parametru. W swoim ciele (ograniczanym przez "{" i "}") wywoluje sie rekurencyjnie dwukrotnie, przekierowujac wyjscie pierwszego wywolania na wejscie drugiego wywolania poprzez mechanizm nienazwanych potokow (pipes, "|") i przechodzi do tla - "&" - dzieki czemu zabicie procesu-rodzica nie zabije procesow-potomkow. Srednik konczy definicje funkcji, a koncowy dwukropek jest jej pierwszym wywolaniem. Ponizej znajduje sie bardziej przejrzysty zapis (zmieniono nazwe funkcji):  perl  Java:  Ruby:  Haskell:  Common Lisp (Clozure CL):  C:   == Trudnosc naprawy == Kiedy fork-bomba zostanie poprawnie uruchomiona, odzyskanie sprawnosci systemu moze nie byc mozliwe bez ponownego uruchomienia, poniewaz jedynym sposobem na zniszczenie fork-bomby jest zabicie wszystkich jej procesow. Proba uzycia programu do zabicia zlosliwych procesow zwykle potrzebuje utworzenia odrebnego procesu, co moze sie nie udac, gdy nie ma wolnych miejsc w tablicy procesow lub wolnej pamieci. Moze wymagac restartu lub wylaczenia. Automatycznie moze naprawic go watchdog. Programowy watchdog linuksa, przy ustawionym ograniczeniu liczby oczekujacych procesow (odkomentowaniu linii zaczynajacych sie od "max-load"), mozliwie lagodnie zrestartuje system. Metoda sprawdzona na Debianie poleceniem:  :(){ :|:& };:  po zmianie ustawien w zbiorze /etc/watchdog.conf na:  max-load-1       = 120 max-load-5       =  90 max-load-15      =  30 min-memory       =   1   == Zapobieganie == Jedna z mozliwosci zapobiezenia fork-bombie jest ustanowienie limitu liczby procesow, ktore moze uruchomic uzytkownik. Gdy proces probuje utworzyc inny proces, a jego rodzic posiada juz wiecej niz przewiduje maksimum, sklonowanie nie zachodzi. Maksimum powinno byc wystarczajaco niskie, aby w razie zaatakowania maszyny przez wielu uzytkownikow naraz pozostawic wystarczajaca ilosc wolnych zasobow dla unikniecia katastrofy.   == Przypisy ==